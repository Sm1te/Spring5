<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd"
>

    <!-- DataSource：使用Spring的数据源替换Mybatis的配置：C3P0 DBCP Druid
      我们这里使用Spring提供的JDBC：     org.springframework.jdbc.datasource.DriverManagerDataSource -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName"    value="com.mysql.jdbc.Driver"/>
        <property name="url"    value="jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username"   value="root"/>
        <property name="password"   value="991214"/>
    </bean>

    <!-- 在IOC容器中配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 绑定Mybatis的核心配置文件
         注意：这里的属性设置是configLocation，而不是configuration -->
        <property name="configLocation"  value="classpath:mybatis-config.xml"/>
        <!-- 在核心配置文件中注册Mapper.xml文件，并且使用resource资源路径绑定注册
         注意：classpath后面要紧跟一个 *(即classpath*:),否则将会报找不到该类型接口的错误 -->
        <property name="mapperLocations"    value="classpath*:com/robin/mapper/*.xml"/>
    </bean>

    <!-- SqlSessionTemplate：就是我们使用的sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <!-- 只能使用构造器注入sqlSessionFactory：因为它没有set方法 -->
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <!-- 注入UserMapperImpl对象，以后直接调用userMapper的方法即可
    <bean id="userMapper" class="com.robin.dao.UserMapperImpl">
        <property name="sqlSessionTemplate" ref="sqlSession"/>
    </bean>-->
    <!-- 配置声明式事务 -->
    <!-- 注入DataSourceTransactionManager对象 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 结合AOP实现事务的织入 -->
    <!-- 配置事务的通知：Spring帮忙做了 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--给那些方法配置事务-->
        <!--配置事务的传播特性：propagation
                在声明式事务中，要配置一个切面，其中用到了propagation类 -->
        <tx:attributes>

            <!-- 分别给插入、删除和修改用户的方法，配置propagation事务属性，其值为REQUIRED
                 即支持当前事务，如果当前没有事务，就新建一个事务 -->
            <tx:method name="add" propagation="REQUIRED"/>
            <tx:method name="delete" propagation="REQUIRED"/>
            <tx:method name="update" propagation="REQUIRED"/>

            <!-- 给查询用户方法设置只读 -->
            <tx:method name="select" read-only="true"/>

            <!-- 给所有方法(*指所有方法)配置propagation事务属性,值也设为REQUIRED -->
            <tx:method name="*" propagation="REQUIRED"/>

        </tx:attributes>
    </tx:advice>

    <!-- 配置业务切入 -->
    <aop:config>
        <!-- 设置切入点，增强com.robin.mapper包及其子包下的类所有类型的全部方法 -->
        <!-- 使用pointcut：设置切面通知执行的“地点”
             使用expression：定义切入点表达式，execution(* com.kuang.mapper..*.*(..))-->
        <aop:pointcut id="txPointCut" expression="execution(* com.robin.mapper..*.*(..))"/>
        <!-- 执行环绕增加（把txAdvice(事务通知)与txPointCut(切入点的方法)相结合）-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>

</beans>